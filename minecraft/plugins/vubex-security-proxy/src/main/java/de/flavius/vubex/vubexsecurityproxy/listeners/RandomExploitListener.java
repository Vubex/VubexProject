package de.flavius.vubex.vubexsecurityproxy.listeners;

import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.event.*;
import net.md_5.bungee.api.plugin.Listener;
import net.md_5.bungee.event.EventHandler;

import java.net.InetSocketAddress;
import java.util.HashMap;
import java.util.Map;

/**
 * @author : flavius
 * project : VubexProject
 **/
public class RandomExploitListener implements Listener {

    private static final Map<String, Long> DoSConnectionTimestamps = new HashMap<>();
    @EventHandler
    public void onPreLogin(PreLoginEvent event) { // DoS Protection
        InetSocketAddress targetSocketAddress = (InetSocketAddress) event.getConnection();
        String targetIP = targetSocketAddress.getAddress().getHostAddress();
        long currentTime = System.currentTimeMillis();

        if (DoSConnectionTimestamps.containsKey(targetIP)) {
            long lastConnectionTime = DoSConnectionTimestamps.get(targetIP);
            if (currentTime - lastConnectionTime < 3000) { // Mindestabstand zwischen Verbindungen in Millisekunden
                event.setCancelled(true);
                event.setCancelReason(new TextComponent("Bitte warte einen Moment, bevor du dich erneut verbindest."));
                return;
            }
        }
        DoSConnectionTimestamps.put(targetIP, currentTime);
    }

    @EventHandler
    public void onLogin(PostLoginEvent event) { // AntiNullPing
        if (event.getPlayer() == null) {
            return; // Spieler ist null, nichts zu tun
        }

        int ping = event.getPlayer().getPing();

        if (ping <= 1) {

            event.getPlayer().disconnect(new TextComponent("Ungültiger Ping-Wert erkannt. Bitte versuche es erneut."));

            System.out.println("Ungültiger Null-Ping von Spieler " + event.getPlayer().getName());
            // log.info("Ungültiger Null-Ping von Spieler " + event.getPlayer().getName());
        }
    }

    @EventHandler
    public void onPlayerConnect(ServerConnectEvent event) {
        if (event.getPlayer().getPendingConnection().getVersion() > 340) { // Block connections from newer clients
            event.setCancelled(true);
            event.getPlayer().disconnect(new TextComponent("Dein Client wird nicht unterstützt."));
        }

    }


    @EventHandler
    public void onTabComplete(TabCompleteEvent event) {
        if (event.getCursor().startsWith("/") && event.getCursor().length() > 1) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onChat(ChatEvent event) {
        String message = event.getMessage();

        // Filtere Nachrichten, die potenziell zu Serverabstürzen führen könnten
        if (containsCrashKeyword(message)) {
            event.setCancelled(true);
        }
    }
    private boolean containsCrashKeyword(String message) {
        // Liste von bekannten Exploit-Mustern
        String[] exploitPatterns = {
                "%%%",                     // Beispiel für ein bekanntes Exploit-Muster
                "§",                  // Bekannte Absturzzeichen (§ in Minecraft)
                "/op ", "/stop",           // Spezifische gefährliche Befehle
                ".*('.*--+).*",            // SQL-Injection-Versuche
                ".*(;|\\||&|\\$|`|\\(\\(|\\)|\n|\r).*",  // Shell-Injection-Versuche
                ".*(.)\\1{10,}.*",         // Übermäßig wiederholte Zeichen
                ".*java\\.rmi.*",          // Verdächtiges in Bezug auf RMI (Remote Method Invocation)
                ".*SELECT.*FROM.*",        // Weitere SQL-Injection-Ansätze
                ".*UNION.*SELECT.*",       // Weitere SQL-Injection-Ansätze
                ".*(\\bexec\\b|\\bxp_cmdshell\\b).*",   // Weitere Versuche von Befehlsinjektion
                ".*<script>.*",            // Versuche, JavaScript einzufügen
                ".*<iframe.*>",            // Versuche, schädlichen HTML-Code einzufügen
                ".*<object>.*",            // Weitere Versuche, schädlichen HTML-Code einzufügen
                ".*<applet>.*",            // Weitere Versuche, schädlichen Java-Code einzufügen
                ".*<embed>.*",             // Weitere Versuche, schädlichen Code einzufügen
                ".*<frame>.*",             // Weitere Versuche, schädlichen HTML-Code einzufügen
                ".*log4j.*",               // Log4j-Exploit
                ".*<img>.*",               // Versuche, Bilder mit schädlichem Code einzufügen
                ".*<a href=.*",            // Weitere Versuche, Links mit schädlichen Inhalten einzufügen
                ".*(\\bunion\\b|\\bselect\\b|\\binsert\\b|\\bupdate\\b).*", // Allgemeine SQL-Keywords
                ".*<input type=.*",        // Versuche, Input-Felder mit schädlichen Inhalten einzufügen
                ".*<textarea>.*",          // Weitere Versuche, schädlichen HTML-Code einzufügen
                ".*(\\bping\\b|\\bpong\\b|\\bpingpong\\b).*",  // Ping-Pong-Exploits
                ".*<style>.*",             // Versuche, schädlichen CSS-Code einzufügen
                ".*<iframe src=.*",        // Weitere Versuche, schädlichen HTML-Code einzufügen
                ".*<link href=.*",         // Weitere Versuche, schädlichen HTML-Code einzufügen
                ".*<audio>.*",             // Versuche, Audio-Elemente mit schädlichen Inhalten einzufügen
                ".*<video>.*",             // Weitere Versuche, Video-Elemente mit schädlichen Inhalten einzufügen
                ".*<svg>.*",               // Versuche, SVG-Elemente mit schädlichem Code einzufügen
                ".*<canvas>.*",            // Weitere Versuche, Canvas-Elemente mit schädlichem Code einzufügen
                ".*<object data=.*",       // Weitere Versuche, schädlichen HTML-Code einzufügen
                ".*<base href=.*",         // Versuche, Base-Elemente mit schädlichen Inhalten einzufügen
                ".*<img src=.*",           // Weitere Versuche, Bilder mit schädlichem Code einzufügen
                ".*<link rel=.*",          // Versuche, schädliche Ressourcen über Link-Tags einzufügen
                ".*<script src=.*",        // Weitere Versuche, schädlichen JavaScript-Code einzufügen
                ".*<meta http-equiv=.*",   // Versuche, HTTP-Equivalent-Meta-Tags mit schädlichem Code einzufügen
                ".*<body onload=.*",       // Weitere Versuche, schädlichen Code über den Body-Tag einzufügen
                ".*<img onerror=.*",       // Versuche, Bilder mit schädlichem Code einzufügen über das onerror-Attribut
                ".*<link onerror=.*",      // Weitere Versuche, schädlichen Code über das onerror-Attribut einzufügen
                ".*<script onerror=.*",    // Weitere Versuche, schädlichen Code über das onerror-Attribut einzufügen
                ".*<object onload=.*",     // Versuche, schädlichen Code über das onload-Attribut einzufügen
                ".*<a onmouseover=.*",     // Weitere Versuche, schädlichen Code über das onmouseover-Attribut einzufügen
                ".*<input onfocus=.*",     // Versuche, schädlichen Code über das onfocus-Attribut einzufügen
                ".*<img onmouseover=.*",   // Versuche, Bilder mit schädlichem Code einzufügen über das onmouseover-Attribut
                ".*<link onmouseover=.*",  // Weitere Versuche, schädlichen Code über das onmouseover-Attribut einzufügen
                ".*(\\bshutdown\\b|\\bhalt\\b|\\breboot\\b).*", // Versuche, den Server herunterzufahren
                ".*<script>alert\\(.*\\).*", // Versuche, Popup-Nachrichten mit schädlichem JavaScript anzuzeigen
                ".*<iframe [^>]*srcdoc=.*", // Weitere Versuche, schädlichen HTML-Code einzufügen
                ".*<object codebase=.*", // Weitere Versuche, schädlichen HTML-Code einzufügen
                ".*<a onclick=.*", // Versuche, schädlichen Code über das onclick-Attribut einzufügen
                ".*<img style=.*", // Weitere Versuche, Bilder mit schädlichem Code einzufügen
                ".*<script src=.*", // Weitere Versuche, schädlichen JavaScript-Code einzufügen
                ".*<meta [^>]*http-equiv=.*", // Weitere Versuche, HTTP-Equivalent-Meta-Tags mit schädlichem Code einzufügen
                ".*<body [^>]*onload=.*", // Weitere Versuche, schädlichen Code über den Body-Tag einzufügen
                ".*<img [^>]*onerror=.*", // Versuche, Bilder mit schädlichem Code einzufügen über das onerror-Attribut
                ".*<link [^>]*onerror=.*", // Weitere Versuche, schädlichen Code über das onerror-Attribut einzufügen
                ".*<script [^>]*onerror=.*", // Weitere Versuche, schädlichen Code über das onerror-Attribut einzufügen
                ".*<object [^>]*onload=.*", // Weitere Versuche, schädlichen Code über das onload-Attribut einzufügen
                ".*<a [^>]*onmouseover=.*", // Weitere Versuche, schädlichen Code über das onmouseover-Attribut einzufügen
                ".*<input [^>]*onfocus=.*", // Versuche, schädlichen Code über das onfocus-Attribut einzufügen
                ".*<img [^>]*onmouseover=.*", // Weitere Versuche, Bilder mit schädlichem Code einzufügen über das onmouseover-Attribut
                ".*<link [^>]*onmouseover=.*", // Weitere Versuche, schädlichen Code über das onmouseover-Attribut einzufügen
                ".*<script [^>]*onmouseover=.*", // Weitere Versuche, schädlichen Code über das onmouseover-Attribut einzufügen
                ".*<script onmouseover=.*" // Weitere Versuche, schädlichen Code über das onmouseover-Attribut einzufügen
        };
        for (String pattern : exploitPatterns) {
            if (message.matches(pattern)) {
                return true;
            }
        }
        return false; // Wenn kein bekanntes Exploit-Muster gefunden wurde
    }

    @EventHandler
    public void onServerPing(ProxyPingEvent event) {
        String motd = event.getResponse().getDescriptionComponent().toPlainText();

        // Filtere die MOTD nach potenziell gefährlichen Mustern
        if (containsCrashKeyword(motd)) {
            event.getResponse().setDescriptionComponent(new TextComponent("Willkommen auf unserem Server!"));
        }
    }


}
