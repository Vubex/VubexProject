package de.flavius.vubex.vubexsecurityspigot.listener;

import org.bukkit.Chunk;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.HashMap;
import java.util.Map;

/**
 * @author : flavius
 * project : VubexProject
 **/
public class ChunkLoadingExploitListener implements Listener { // TODO: Der spieler könnte wegen der geschwindigkeit erfasst werden
    private final Map<Chunk, Long> chunkLoadTimes = new HashMap<>();
    private static final long MAX_CHUNK_LOAD_TIME = 5000;
    private static final int MAX_SUSPICIOUS_CHUNK_LOADS = 3;
    private static final int CHECK_INTERVAL = 100;

    @EventHandler
    public void onChunkLoad(ChunkLoadEvent event) {
        Chunk chunk = event.getChunk();
        chunkLoadTimes.put(chunk, System.currentTimeMillis());
    }

    @EventHandler
    public void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        Chunk chunk = player.getLocation().getChunk();

        if (chunkLoadTimes.containsKey(chunk)) {
            long loadTime = System.currentTimeMillis() - chunkLoadTimes.get(chunk);

            if (loadTime > MAX_CHUNK_LOAD_TIME) {
                handleSuspiciousChunkLoad(player, chunk);
            } else if (loadTime < CHECK_INTERVAL) {
                // Der Spieler hat sich zu schnell bewegt, möglicherweise auch ein Anzeichen für Exploits
                handleSuspiciousMovement(player, chunk);
            }

            chunkLoadTimes.remove(chunk);
        }
    }

    private void handleSuspiciousChunkLoad(Player player, Chunk chunk) {
        int suspiciousLoads = 1;

        if (chunkLoadTimes.containsKey(chunk)) {
            suspiciousLoads = chunkLoadTimes.get(chunk).intValue();
            chunkLoadTimes.remove(chunk);
        }

        if (suspiciousLoads >= MAX_SUSPICIOUS_CHUNK_LOADS) {
            player.kickPlayer("Deine Verbindung wurde aufgrund verdächtiger Aktivität getrennt.");

        } else {
            chunkLoadTimes.put(chunk, (long) suspiciousLoads + 1);
        }
    }

    private void handleSuspiciousMovement(Player player, Chunk chunk) {
        // Hier könntest du Aktionen für verdächtige Bewegungen des Spielers durchführen
    }
}
